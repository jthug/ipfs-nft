{"version":3,"sources":["reportWebVitals.js","index.js","App.js","getWeb3.js","plus.svg"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","ipfs","require","ipfsApi","host","port","protocol","useState","file","setFile","hash","setHash","tokenId","setTokenId","loading","setLoading","account","setAccount","ic_plus","preview","setPreview","useEffect","a","window","ethereum","web3","Web3","eth","getAccounts","accounts","length","alert","check","className","style","height","display","alignItems","padding","flex","border","borderRadius","lineHeight","cursor","onClick","enable","position","width","margin","marginTop","src","left","top","opacity","type","onChange","e","reader","FileReader","target","files","readAsDataURL","onloadend","result","justifyContent","color","readAsArrayBuffer","add","Buffer","from","res","getWeb3","nft","Contract","abi","utils","keccak256","methods","mint","send","href","Promise","resolve","reject","error","console","log","provider","providers","HttpProvider"],"mappings":"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","file":"static/js/main.1a642fd5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState ,useEffect} from \"react\";\nimport \"./App.css\";\nimport ReactLoading from \"react-loading\";\nimport Web3 from \"web3\";\nimport abi from \"./contract/contract.json\";\nimport getWeb3 from './getWeb3'\nimport ic_plus from './plus.svg'\nconst ipfsApi = require(\"ipfs-api\");\nconst ipfs = ipfsApi({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\n\n\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [hash, setHash] = useState(null);\n  const [tokenId, setTokenId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [account,setAccount] = useState(null)\n  const [preview,setPreview] = useState(ic_plus)\n\n  useEffect(() => {\n\n    const check = async ()=>{\n      if(window.ethereum){\n        const web3 = new Web3(window.ethereum)\n        const accounts = await web3.eth.getAccounts()\n        if(accounts.length>0){\n          setAccount(accounts[0])\n        }\n      }else{\n        alert(\"请安装MetaMask插件\")\n      }\n    }\n    \n    check()\n    \n  }, [])\n\n\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          height: \"60px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          padding: \"0 20px\",\n        }}\n      >\n        <div style={{ flex: \"1\" }}></div>\n        <div\n          style={{\n            border: \"1px solid black\",\n            borderRadius: \"10px\",\n            height: \"30px\",\n            lineHeight: \"30px\",\n            padding: \"0 5px\",\n            cursor:'pointer'\n          }}\n\n          onClick={\n            async ()=>{\n              if(window.ethereum){\n                const accounts = await window.ethereum.enable()\n\n                setAccount(accounts)\n              }\n            }\n          }\n        >\n          {account?account:'连接钱包'}\n        </div>\n      </div>\n      <div style={{position:'relative',width:'80px',height:'80px',border:'1px solid black',margin:'0 auto',display:'table',marginTop:'50px'}}>\n        <img src={preview} style={{position:\"absolute\",width:'100%',height:'100%',left:'0'}}/>\n        <input\n        style={{position:\"absolute\",width:'100%',height:'100%',left:'0px',top:'0px',opacity:'0'}}\n          type=\"file\"\n          onChange={(e) => {\n            const reader = new FileReader();\n            const file = e.target.files[0];\n            setFile(file);\n            reader.readAsDataURL(file);\n            reader.onloadend = () => {\n              setPreview(reader.result)\n            }\n            \n          }}\n        />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginTop:'20px'\n        }}\n      >\n        {loading ? (\n          <ReactLoading type=\"spin\" color=\"#000000\" height=\"2%\" width=\"2%\" />\n        ) : (\n          <button\n            onClick={async () => {\n              setLoading(true);\n              const reader = new FileReader();\n              reader.readAsArrayBuffer(file);\n              reader.onloadend = () => {\n                ipfs.add(Buffer.from(reader.result)).then(async (res) => {\n                  setHash(res[0].hash);\n                  setLoading(false);\n                  const web3 =  await getWeb3()\n                  const nft = new web3.eth.Contract(\n                    abi,\n                    \"0x550f4D9be310A84d4A048fe4e8130A935AB4c527\"\n                  );\n                  const tokenId = web3.utils.keccak256(res[0].hash);\n                  setTokenId(tokenId);\n                  nft.methods\n                    .mint(tokenId, res[0].hash)\n                    .send({\n                      from: account\n                    });\n                });\n              };\n            }}\n          >\n            commit\n          </button>\n        )}\n      </div>\n      <div>\n        {hash ? <img src={\"https://ipfs.infura.io/ipfs/\" + hash} /> : null}\n      </div>\n      <div>\n        {hash ? (\n          <a href={\"https://ipfs.infura.io/ipfs/\" + hash}>\n            {\"https://ipfs.infura.io/ipfs/\" + hash}\n          </a>\n        ) : null}\n      </div>\n      <div>{tokenId ? <p>{tokenId}</p> : null}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    // });\n  });\n\nexport default getWeb3;\n","export default __webpack_public_path__ + \"static/media/plus.dde74494.svg\";"],"sourceRoot":""}